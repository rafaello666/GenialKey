datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  username     String          @unique
  passwordHash String
  role         UserRole        @default(ADMIN)
  typingResults TypingResult[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // NEW: indeks po createdAt
  @@index([createdAt])

  // NEW: ewentualny indeks po roli, jeśli często filtrujemy
  // @@index([role])
}

model Course {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  lessons     Lesson[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Lesson {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  course        Course         @relation(fields: [courseId], references: [id])
  courseId      Int
  typingResults TypingResult[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TypingResult {
  id        Int      @id @default(autoincrement())
  wpm       Int
  accuracy  Float    // Można rozważyć Decimal(5,2) przy większej precyzji
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  lessonId  Int
  createdAt DateTime @default(now())

  // NEW: indeks złożony userId + lessonId (częste zapytania)
  @@index([userId, lessonId])

  // NEW: jeśli sortujemy po dacie, warto dodać też indeks na createdAt
  // @@index([createdAt])
}
model TypingExercise {
  id              Int      @id @default(autoincrement())
  title           String   @db.VarChar(255)
  text            String   @db.Text
  difficultyLevel Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}